#-*-coding:utf-8-*-

import numpy as np
import matplotlib.pyplot as plt
total_joints_num = 32


def show3Dpose(channels,
               ax,
               lcolor="#3498db",
               rcolor="#e74c3c",
               add_labels=True,
               gt=False,
               pred=False,
               plot_dot=False
               ):  # blue, orange
    """
    Visualize a 3d skeleton

    Args
      channels: 96x1 vector. The pose to plot.
      ax: matplotlib 3d axis to draw on
      lcolor: color for left part of the body
      rcolor: color for right part of the body
      add_labels: whether to add coordinate labels
    Returns
      Nothing. Draws on ax.
    """

    if channels.shape[0] == 96:
        vals = np.reshape(channels, (32, -1))
    else:
        vals = channels
    I = np.array([1, 2, 3, 1, 7, 8, 1, 13, 14, 15, 14, 18, 19, 14, 26, 27]) - 1  # start points
    J = np.array([2, 3, 4, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 26, 27, 28]) - 1  # end points
    LR = np.array([1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], dtype=bool)
    dim_use_3d = [3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25,
                  26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53,
                  54, 55, 56, 57, 58, 59, 75, 76, 77, 78, 79, 80, 81, 82, 83]
    # Make connection matrix
    for i in np.arange(len(I)):
        x, y, z = [np.array([vals[I[i], j], vals[J[i], j]]) for j in range(3)]
        if gt:
            ax.plot(x, y, z, lw=4, c='k')
        #        ax.plot(x,y, z,  lw=2, c='k')

        elif pred:
            ax.plot(x, z, -y, lw=4, c='r')
        #        ax.plot(x,y, z,  lw=2, c='r')

        else:
            #        ax.plot(x,z, -y,  lw=2, c=lcolor if LR[i] else rcolor)
            ax.plot(x, y, z, lw=4, c=lcolor if LR[i] else rcolor)
    if plot_dot:
        joints = channels.reshape(96)
        joints = joints[dim_use_3d].reshape(16, 3)
        ax.scatter(joints[:, 0], joints[:, 1], joints[:, 2], c='k', marker='o')
    RADIUS = 750  # space around the subject
    xroot, yroot, zroot = vals[0, 0], vals[0, 1], vals[0, 2]
    ax.set_xlim3d([-RADIUS + xroot, RADIUS + xroot])
    ax.set_zlim3d([-RADIUS + zroot, RADIUS + zroot])
    ax.set_ylim3d([-RADIUS + yroot, RADIUS + yroot])

    if add_labels:
        ax.set_xlabel("x")
        ax.set_ylabel("y")
        ax.set_zlabel("z")

    ax.set_aspect('auto')
    #  ax.set_xticks([])
    #  ax.set_yticks([])
    #  ax.set_zticks([])

    #  ax.get_xaxis().set_ticklabels([])
    #  ax.get_yaxis().set_ticklabels([])
    #  ax.set_zticklabels([])
    # Get rid of the panes (actually, make them white)
    #  white = (1.0, 1.0, 1.0, 0.0)
    #  ax.w_xaxis.set_pane_color(white)
    #  ax.w_yaxis.set_pane_color(white)
    # Keep z pane

    # Get rid of the lines in 3d
    #  ax.w_xaxis.line.set_color(white)
    #  ax.w_yaxis.line.set_color(white)
    #  ax.w_zaxis.line.set_color(white)
    ax.view_init(10, -60)


if __name__ == '__main__':
    father_bone = np.array([-26.017000198364258, 659.6329956054688, 917.6480102539062, -130.90054321289062, 603.06494140625, 923.584228515625, -162.97560119628906, 484.32232666015625, 513.33984375, -276.5113220214844, 538.9822387695312, 89.21865844726562, -264.859130859375, 403.36260986328125, 34.39588928222656, -265.51898193359375, 332.306640625, 58.38550567626953, 78.86579895019531, 716.20068359375, 911.7118530273438, 109.70648193359375, 728.9241943359375, 484.7274475097656, 69.05551147460938, 862.8753051757812, 65.01152038574219, 150.8942108154297, 745.80712890625, 31.378429412841797, 200.72909545898438, 694.290283203125, 53.457279205322266, -26.011560440063477, 659.6333618164062, 917.7478637695312, -53.7849235534668, 659.4111328125, 1140.2408447265625, -88.10198211669922, 626.5931396484375, 1389.8197021484375, -66.125, 532.8142700195312, 1456.4462890625, -112.96037292480469, 602.103515625, 1535.3773193359375, -88.10198211669922, 626.5931396484375, 1389.8197021484375, 20.55335807800293, 709.119873046875, 1346.6932373046875, 241.72450256347656, 752.8900146484375, 1208.22802734375, 392.4771728515625, 560.609130859375, 1254.20361328125, 392.4771728515625, 560.609130859375, 1254.20361328125, 345.77362060546875, 546.5153198242188, 1341.496337890625, 475.9122009277344, 520.8990478515625, 1292.4317626953125, 475.9122009277344, 520.8990478515625, 1292.4317626953125, -88.10198211669922, 626.5931396484375, 1389.8197021484375, -187.40086364746094, 567.8629760742188, 1305.1588134765625, -151.79685974121094, 424.5013427734375, 1085.6495361328125, 78.09835815429688, 508.656982421875, 1128.986572265625, 78.09835815429688, 508.656982421875, 1128.986572265625, 77.14738464355469, 587.83203125, 1190.065185546875, 206.67327880859375, 479.8706970214844, 1168.303466796875, 206.67327880859375, 479.8706970214844, 1168.303466796875])
    mother_bone = np.array([-171.906005859375, 52.16910171508789, 937.6119995117188, -303.5611877441406, 67.2279281616211, 948.3578491210938, -280.3568115234375, -6.976569175720215, 512.3408203125, -347.5560302734375, 73.47404479980469, 70.39571380615234, -262.88580322265625, -57.99753189086914, 25.23711585998535, -225.506103515625, -122.72428894042969, 31.411226272583008, -40.25059509277344, 37.110252380371094, 926.8660888671875, -45.99199295043945, 68.73553466796875, 485.1395568847656, 0.8021620512008667, 214.21115112304688, 57.412105560302734, -19.345123291015625, 55.424598693847656, 27.84606170654297, -28.613948822021484, -18.976118087768555, 29.74721908569336, -171.9003143310547, 52.14910888671875, 937.7098388671875, -178.0168914794922, 63.822532653808594, 1170.720703125, -145.70513916015625, 76.66697692871094, 1425.43603515625, -149.3746337890625, 52.778663635253906, 1544.135498046875, -80.418212890625, 141.3494415283203, 1569.1502685546875, -145.70513916015625, 76.66697692871094, 1425.43603515625, -5.597678184509277, 66.60669708251953, 1369.93798828125, 207.91229248046875, 163.578125, 1218.9888916015625, 71.88123321533203, 155.60772705078125, 1007.32470703125, 71.88123321533203, 155.60772705078125, 1007.32470703125, 1.1994152069091797, 208.17356872558594, 1054.662109375, 3.7936527729034424, 86.90230560302734, 981.9537353515625, 3.7936527729034424, 86.90230560302734, 981.9537353515625, -145.70513916015625, 76.66697692871094, 1425.43603515625, -295.800537109375, 89.4490966796875, 1414.5509033203125, -458.79400634765625, -99.96511840820312, 1538.39208984375, -526.1239624023438, -246.65548706054688, 1731.5654296875, -526.1239624023438, -246.65548706054688, 1731.5654296875, -490.1808776855469, -191.25341796875, 1806.6566162109375, -481.03533935546875, -360.55438232421875, 1794.0177001953125, -481.03533935546875, -360.55438232421875, 1794.0177001953125])

    plt.figure()
    ax1 = plt.subplot(1, 2, 1, projection='3d')
    # plt.title('father')
    show3Dpose(father_bone.reshape(total_joints_num, -1), ax1, add_labels=False, plot_dot=True)
    ax2 = plt.subplot(1, 2, 2, projection='3d')
    # plt.title('mother')
    show3Dpose(mother_bone.reshape(total_joints_num, -1), ax2, add_labels=False, plot_dot=True)
    plt.tight_layout()
    plt.savefig("3d_vis.JPG")